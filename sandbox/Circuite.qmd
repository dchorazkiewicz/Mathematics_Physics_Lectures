# Circuits

## NetworkX

Graph Structure and Operations in NetworkX

Structure of Graphs in NetworkX
Graphs in NetworkX are data structures representing nodes and edges. NetworkX provides various graph types based on specific needs:
- Graph: A simple undirected graph with no loops or multiple edges between the same nodes.
- DiGraph: A directed graph where edges have a direction (e.g., from node A to B).
- MultiGraph: An undirected graph that allows multiple edges between the same pair of nodes (parallel edges).
- MultiDiGraph: A directed graph with support for multiple edges between nodes.

For tasks like handling parallel edges (e.g., in circuit simplification), a MultiGraph is used since it supports multiple edges between the same nodes, which is essential for modeling parallel resistors in a circuit.

Graph Elements and Terminology
1. Nodes:
   - Nodes are the fundamental elements of a graph, representing entities (e.g., vertices in a circuit, people in a social network).
   - In NetworkX, nodes can be any hashable object (e.g., numbers, strings, tuples).
   - Example: A node can be named 'o1', 1, or even ('a', 'b').
   - Nodes can have attributes, e.g., G.nodes['o1']['color'] = 'red'.

2. Edges:
   - Edges represent connections between nodes, modeling relationships (e.g., a resistor between circuit points).
   - In Graph and DiGraph, an edge is a pair (u, v), where u and v are nodes.
   - In MultiGraph and MultiDiGraph, edges have an additional identifier called a key, as multiple edges can exist between the same nodes. An edge is then a triplet (u, v, key).
   - Edges can have attributes, e.g., a resistance attribute: G.add_edge('o1', 'o3', resistance=4).

3. Attributes:
   - Both nodes and edges can store additional data as a dictionary of attributes.
   - Example: For an edge, G[u][v]['resistance'] = 5, or in a MultiGraph, G[u][v][key]['resistance'] = 5.
   - For nodes: G.nodes[u]['label'] = 'start'.

How to Search for Elements in a Graph
NetworkX provides numerous methods to search and manipulate graphs. Here are the key ones relevant to the context:

1. Finding Nodes:
   - G.nodes(): Returns a list of all nodes in the graph.
     for node in G.nodes():
         print(node)
   - Use data=True to include node attributes:
     for node, attrs in G.nodes(data=True):
         print(node, attrs)
   - Node Degree: G.degree(node) returns the degree of a node (number of edges connected to it).
     if G.degree('o2') == 2:
         print("Node o2 has degree 2")

2. Finding Edges:
   - G.edges(): Returns a list of edges as pairs (u, v).
     for u, v in G.edges():
         print(f"Edge: {u}-{v}")
   - In a MultiGraph, use keys=True and/or data=True to include edge keys and attributes:
     for u, v, key, data in G.edges(keys=True, data=True):
         print(f"Edge: {u}-{v}, key: {key}, attributes: {data}")
   - Edges Between Specific Nodes:
     - In a MultiGraph, use G.get_edge_data(u, v) to get a dictionary of edges between u and v:
       edges = G.get_edge_data('o1', 'o3')
       for key, attrs in edges.items():
           print(f"Edge o1-o3, key: {key}, resistance: {attrs['resistance']}")

3. Node Neighbors:
   - G.neighbors(node): Returns an iterator of neighbors for a given node.
     neighbors = list(G.neighbors('o2'))
     print(neighbors)  # ['o1', 'o3']
   - In a DiGraph, use G.successors(node) for outgoing edges and G.predecessors(node) for incoming edges.

4. Accessing Attributes:
   - For edges in a Graph: G[u][v]['resistance'].
   - In a MultiGraph: G[u][v][key]['resistance'].
   - For nodes: G.nodes[node]['attribute'].

5. Searching for Specific Structures:
   - Nodes with a Specific Degree: Iterate over G.nodes() and check G.degree(node).
   - Parallel Edges: Check if multiple edges exist between u and v using G.get_edge_data(u, v).

Example in the Context of the Algorithm
In the task of finding parallel edges (e.g., two edges between o1 and o3):
- A MultiGraph is used to allow multiple edges.
- G.edges(keys=True, data=True) helps iterate over edges to find pairs of nodes with multiple edges.
- G.get_edge_data('o1', 'o3') retrieves all edges between o1 and o3, allowing us to access their resistance attributes and replace them with a single edge.


## An idea of reducing complexity


### Case 1

#### Initial

This graph represents a simple path from `B+` to `B-` through several nodes (`R1`, `R2`, `R3`, `R4`, and `R5`). The nodes are connected in a linear fashion, with `B+` as the starting point and `B-` as the endpoint.

B+ and B- are the start and end nodes, represents battery endsite. Each



```mermaid
graph LR
    B+((B+))-->R1
    B+-->R2
    R2-->R3
    R3-->R4
    R1-->R4
    R4-->R5
    R5-->B-((B-))
```

#### First step

```mermaid
graph LR
    style R2 fill:#ff0000
    style R3 fill:#ff0000
    B+((B+))-->R1
    B+-->R2
    R2-->R3
    R3-->R4
    R1-->R4
    R4-->R5
    R5-->B-((B-))
```
```mermaid
graph LR
    style R23 fill:#ff0000
    B+((B+))-->R1
    B+-->R23
    R23-->R4
    R1-->R4
    R4-->R5
    R5-->B-((B-))
```

#### Second step

```mermaid
graph LR
    style R4 fill:#00ff00
    style R5 fill:#00ff00
    B+((B+))-->R1
    B+-->R23
    R23-->R4
    R1-->R4
    R4-->R5
    R5-->B-((B-))
```
```mermaid
graph LR
    style R45 fill:#00ff00
    B+((B+))-->R1
    B+-->R23
    R23-->R45
    R1-->R45
    R45-->B-((B-))
```

#### Third step

```mermaid
graph LR
    style R1 fill:#00ffff
    style R23 fill:#00ffff
    B+((B+))-->R1
    B+-->R23
    R23-->R45
    R1-->R45
    R45-->B-((B-))
```

```mermaid
graph LR
    style R123 fill:#00ffff
    B+((B+))-->R123
    R123-->R45
    R45-->B-((B-))
```

#### Fourth step

```mermaid
graph LR
    style R123 fill:#f0f
    style R45 fill:#f0f
    B+((B+))-->R123
    R123-->R45
    R45-->B-((B-))
```

```mermaid
graph LR
    style R12345 fill:#f0f
    B+((B+))-->R12345
    R12345-->B-((B-))
```

### Case 2

#### Initial

```mermaid
graph LR
    B+((B+))-->R1
    R1 --> R2
    R1 --> R3
    R2 --> o1((o))
    R3 --> o1    
    o1 --> R4
    o1 --> R5
    R4 --> B-((B-))
    R5 --> B-((B-))
```

To be more consistent, we should draw

```mermaid
graph LR
    B+((B+))-->o1((o))
    o1 --> R1
    R1 --> o2((o))
    o2 --> R2
    o2 --> R3
    R2 --> o3((o))
    R3 --> o3    
    o3 --> R4
    o3 --> R5
    R4 --> o4((o))
    R5 --> o4((o))
    o4 --> B-((B-))
```

Instead representing the resitors as nodes, we can represent them as edges. This way, we can reduce the complexity of the graph.



```mermaid
graph LR
    B+((B+))-->o0((o))
    o0-->|R1|o1((o))
    o1-->|R2|o2((o))
    o1-->|R3|o2
    o2-->|R4|o3((o))
    o2-->|R5|o3
    o3-->B-((B-))
```


## Building blocks

### Series configuration

```mermaid
graph LR
    style o2 fill:#ff0000
    style o1 fill:#00ff00
    style o3 fill:#00ff00
    I1(I1)-->o1
    ... -->o1
    In(In)-->o1
    o1((o1))-->R1
    R1-->o2((o2))
    o2-->R2
    R2-->o3((o3))
    o3-->D1(D1)
    o3-->.,.
    o3-->D4(D4)
```

Can be replaced by

```mermaid
graph LR
    style o1 fill:#00ff00
    style o3 fill:#00ff00
    I1(I1)-->o1
    ... -->o1
    In(In)-->o1
    o1((o1))-->R12
    R12-->o3((o3))
    o3-->D1(D1)
    o3-->.,.
    o3-->Dm(Dm)
```

How find this situation?
1. Find the first node with degree 2 (`o2`)
2. Find the nodes to which it is connected: `o1` and `o3`
3. Remove edge `o1-o2` and `o2-o3`
4. Add edge `o1-o3` with the new resistance `R12 = R1 + R2`

```python
import networkx as nx

# Assume G is your graph with edges having a 'resistance' attribute
G = nx.Graph()

# Find the first node with degree 2
node_with_degree_2 = None
for node in G.nodes():
    if G.degree(node) == 2:
        node_with_degree_2 = node
        break

if node_with_degree_2:
    # Step 1: Find the two nodes connected to the degree-2 node (o2)
    neighbors = list(G.neighbors(node_with_degree_2))  # Should be exactly 2 neighbors
    if len(neighbors) == 2:
        o1, o3 = neighbors

        # Step 2: Get the resistances of the edges o1-o2 and o2-o3
        R1 = G[node_with_degree_2][o1]['resistance']
        R2 = G[node_with_degree_2][o3]['resistance']

        # Step 3: Remove edges o1-o2 and o2-o3
        G.remove_edge(o1, node_with_degree_2)
        G.remove_edge(node_with_degree_2, o3)

        # Step 4: Add edge o1-o3 with new resistance R1 + R2
        G.add_edge(o1, o3, resistance=R1 + R2)
else:
    print("No node with degree 2 found.")

```

### Parallel configuration

```mermaid

### Parallel configuration

```mermaid
graph LR
    style o1 fill:#00ff00
    style o3 fill:#00ff00
    I1(I1)-->o1
    ... -->o1
    In(In)-->o1
    o1((o1))-->R1
    R1-->o3
    o1-->R2
    R2-->o3((o3))
    o3-->D1(D1)
    o3-->.,.
    o3-->D4(D4)
```

Can be replaced by

```mermaid
graph LR
    style o1 fill:#00ff00
    style o3 fill:#00ff00
    I1(I1)-->o1
    ... -->o1
    In(In)-->o1
    o1((o1))-->R12
    R12-->o3((o3))
    o3-->D1(D1)
    o3-->.,.
    o3-->Dm(Dm)
```
How find this situation?
1. Find two edges with the same start and end nodes (`o1` and `o3`)
2. Remove the edges `o1-o3` with label `R1` and `R2`
3. Add edge `o1-o3` with the new resistance `R12 = R1*R2/(R1 + R2)`

```python
import networkx as nx

# Create a MultiGraph to allow parallel edges
G = nx.MultiGraph()

# Example setup (uncomment to test):
# G.add_edge('o1', 'o3', resistance=4)  # First edge with resistance R1
# G.add_edge('o1', 'o3', resistance=6)  # Second edge with resistance R2

# Step 1: Find pairs of nodes with multiple edges
for u, v, key, data in G.edges(keys=True, data=True):
    # Check if there are multiple edges between u and v
    edges = list(G.get_edge_data(u, v).items())
    if len(edges) > 1:  # If there are at least 2 edges between u and v
        # Step 2: Get the resistances of the two edges
        # edges is a list of (key, data) pairs
        R1 = edges[0][1]['resistance']  # Resistance of the first edge
        R2 = edges[1][1]['resistance']  # Resistance of the second edge

        # Remove the parallel edges
        G.remove_edge(u, v, key=edges[0][0])  # Remove first edge
        G.remove_edge(u, v, key=edges[1][0])  # Remove second edge

        # Step 3: Add a new edge with resistance R12 = R1*R2/(R1 + R2)
        if R1 + R2 != 0:  # Avoid division by zero
            R12 = (R1 * R2) / (R1 + R2)
            G.add_edge(u, v, resistance=R12)
        else:
            print(f"Cannot compute parallel resistance for {u}-{v}: R1 + R2 = 0")
        
        break  # Stop after processing the first pair of parallel edges
```

